generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CuisineType {
  PIZZERIA // Pizzaria
  PASTA // Massas
  JAPANESE // Japonesa
  BURGER // Hambúrguer
  VEGAN // Vegana
  BBQ // Churrasco
  SEAFOOD // Frutos do Mar
  SUSHI // Sushi
  CHINESE // Chinesa
  INDIAN // Indiana
  MEXICAN // Mexicana
  THAI // Tailandesa
  ARABIC // Árabe
  BAKERY // Padaria
  CAFE // Cafeteria
  FASTFOOD // Fast Food
  HEALTHY // Saudável
  DESSERT // Sobremesas
  STEAKHOUSE // Churrascaria / Steakhouse
  BRAZILIAN // Brasileira
  OTHERS //Outros
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  MARKETING
}

enum ProductAvailabilityBy {
  DELIVERY
  LOCAL
  BOTH
}

enum AvailabilityStatus {
  DELIVERY
  LOCAL
}

enum PaymentMethods {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  CASH
  VOUCHER
}

enum PaymentCardBrand {
  VISA
  MASTERCARD
  AMEX
  ELO
  HIPERCARD
  OTHER
}

enum PaymentVoucherBrand {
  ALELO
  SODEXO
  VR
  BEN
  VEROCHEQUE
  OTHER
}

model Company {
  id                     Int                   @id @default(autoincrement())
  email                  String                @unique
  name                   String
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  legalName              String? // Razão social
  document               String? // CNPJ ou CPF
  phone                  String?
  logoUrl                String
  isActive               Boolean               @default(true)
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  users                  User[]
  openingHours           OpeningHour[]
  isAlwaysOpening        Boolean               @default(false)
  temporaryClosed        Boolean               @default(false)
  menu                   Menu[]
  cuisineType            CuisineType           @default(OTHERS)
  availability           AvailabilityStatus[]  @default([DELIVERY, LOCAL])
  paymentMethodAvailable PaymentMethods[]      @default([CREDIT_CARD, DEBIT_CARD, PIX, CASH])
  paymentCardBrand       PaymentCardBrand[]    @default([VISA, MASTERCARD, AMEX, ELO, HIPERCARD, OTHER])
  paymentVoucherBrand    PaymentVoucherBrand[] @default([ALELO, SODEXO, VR, BEN, VEROCHEQUE, OTHER])
}

model OpeningHour {
  id        Int     @id @default(autoincrement())
  companyId Int
  dayOfWeek Int // 0 = Domingo, ..., 6 = Sábado
  startTime String? // "HH:mm"
  endTime   String? // "HH:mm"
  closed    Boolean @default(false)
  company   Company @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String?
  phone     String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      UserRole
  isActive  Boolean  @default(false)
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
}

model MenuHours {
  id          Int        @id @default(autoincrement())
  dayOfWeek   Int // 0 = Domingo, ..., 6 = Sábado
  startTime   String? // "HH:mm"
  endTime     String? // "HH:mm"
  menuGroup   MenuGroup? @relation(fields: [menuGroupId], references: [id], onDelete: Cascade)
  menuGroupId Int?
  closed      Boolean    @default(false)
}

model MenuGroup {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  name            String
  menuHours       MenuHours[]
  menu            Menu        @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId          Int
  products        Product[]
  disabled        Boolean     @default(false)
  alwaysAvailable Boolean     @default(true)
}

model Menu {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  menuGroup MenuGroup[]
  company   Company     @relation(fields: [companyId], references: [id])
  companyId Int
}

model ProductHours {
  id        Int      @id @default(autoincrement())
  dayOfWeek Int // 0 = Domingo, ..., 6 = Sábado
  startTime String? // "HH:mm"
  endTime   String? // "HH:mm"
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  closed    Boolean  @default(false)
}

model Product {
  id                    Int                   @id @default(autoincrement())
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  code                  String?
  name                  String
  description           String?
  price                 Float
  menuGroup             MenuGroup             @relation(fields: [menuGroupId], references: [id], onDelete: Cascade)
  menuGroupId           Int
  isAdultOnly           Boolean               @default(false)
  productHours          ProductHours[]
  image                 String?
  productAvailabilityBy ProductAvailabilityBy
  disabled              Boolean               @default(false)
  alwaysAvailable       Boolean               @default(true)
}
